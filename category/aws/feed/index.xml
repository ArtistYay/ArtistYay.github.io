<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>AWS &#8211; User&#039;s blog</title>
	<atom:link href="/category/aws/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Just another WordPress site</description>
	<lastBuildDate>Thu, 07 Jul 2022 17:11:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.3</generator>
	<item>
		<title>Troubleshooting AWS Network Connectivity: Security Groups and NACLs</title>
		<link>/2022/07/07/troubleshooting-aws-network-connectivity-security-groups-and-nacls/</link>
		
		<dc:creator><![CDATA[user]]></dc:creator>
		<pubDate>Thu, 07 Jul 2022 17:11:39 +0000</pubDate>
				<category><![CDATA[AWS]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://artistuniverse.tech/?p=368</guid>

					<description><![CDATA[Hey everyone! Hope all is good. Today I wanted to go through a lab. Wanted to put my troubleshooting skills to the test. So this is the scenario a junior administrator has deployed a VPC and instances, but there are a few things wrong.&#160;Instance3&#160;is not able to connect to the internet and the junior admin [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Hey everyone! Hope all is good. Today I wanted to go through a lab. Wanted to put my troubleshooting skills to the test. So this is the scenario a junior administrator has deployed a VPC and instances, but there are a few things wrong.&nbsp;Instance3&nbsp;is not able to connect to the internet and the junior admin can&#8217;t determine why. Being a senior administrator, it&#8217;s your responsibility to troubleshoot the issue and ensure the instance has connectivity to the internet, so that you can ping and log in to the instance using SSH.</p>



<p>First thing I did was look at the instance security group to see what rules were created for the instance.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_115647151.png" alt="" class="wp-image-369"/><figcaption>The instance is able to receive SSH and ICMP traffic from all sources and is able to communicate to the internet. </figcaption></figure>



<p>Looks like the security group has the correct rules it needs. Now let&#8217;s look at the subnet the instance is in. </p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_120312920-965x1024.png" alt="" class="wp-image-370"/><figcaption>The subnet the instance is in, the inbound and outbound rules has not been properly configured. It only has deny rules.</figcaption></figure>



<p>Let&#8217;s edit the rules to accept SSH and ICMP and open the outbound connections from anywhere.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_121122728-1024x576.png" alt="" class="wp-image-371"/></figure>



<p>Now that the subnet has the rules configured properly we have to test to see if the instance is able to be reached but the instance only has a private IP address. Let&#8217;s allocate a public IP and attach it to the instances. Let&#8217;s click on the instance and under actions click on networking, then manage IP addresses.  </p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_121519424-965x1024.png" alt="" class="wp-image-372"/></figure>



<p>We then gonna see an option to allocate an IP addresses let&#8217;s click on the link, click on Allocate Elastic IP address.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_121644939-965x1024.png" alt="" class="wp-image-373"/></figure>



<p>Allocate then associate it with the instance.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_121735805-965x1024.png" alt="" class="wp-image-374"/></figure>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_121823978-965x1024.png" alt="" class="wp-image-375"/></figure>



<p>Now let&#8217;s ping the address to make sure everything is configured properly.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/Screenshot-2022-07-07-122450.png" alt="" class="wp-image-376"/><figcaption>Hmmm looks like we still have connectivity issues with our instances.</figcaption></figure>



<p>This part is where I received some help from the video. The instance route table didn&#8217;t have a rule to point to the internet gateway.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_123526104-965x1024.png" alt="" class="wp-image-378"/></figure>



<p>Let&#8217;s edit the route table association and associate the route table from public 3.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_123800814-965x1024.png" alt="" class="wp-image-379"/></figure>



<p>Let&#8217;s ping the instance again to see if we can ping the instance now.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-07_130525006.png" alt="" class="wp-image-380"/></figure>



<p>And Voil√†! looks like we figured it out!</p>



<p><strong>Conclusion:</strong> For my thought process I was comparing the three instances together, what rules does instance 1 and 2 has that 3 don&#8217;t? Is it the subnet rules or the Network ACL?  I also have to remember in order for the instances in a subnet to talk I have to attach a internet gateway and configure my route table to talk to that gateway. And that&#8217;s all folks! hope someone learned something today because I did! until next time <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="üôÇ" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>CatPipeline</title>
		<link>/2022/07/04/catpipline/</link>
		
		<dc:creator><![CDATA[user]]></dc:creator>
		<pubDate>Mon, 04 Jul 2022 19:22:54 +0000</pubDate>
				<category><![CDATA[AWS]]></category>
		<guid isPermaLink="false">https://artistuniverse.tech/?p=281</guid>

					<description><![CDATA[Today I wanted to go over a quick demo from Adrian Cantrill himself. I always wanted to create my own pipeline so making this should be fun üôÇ In this lab we&#8217;re gonna be using AWS Load balancer&#8217;s, ECS Fargate, CodeCommit, CodeDeploy, and many other&#8217;s! So let&#8217;s jump right into it! Stage 1: Configure Security [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Today I wanted to go over a quick demo from Adrian Cantrill himself. I always wanted to create my own pipeline so making this should be fun <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="üôÇ" class="wp-smiley" style="height: 1em; max-height: 1em;" /> In this lab we&#8217;re gonna be using AWS Load balancer&#8217;s, ECS Fargate, CodeCommit, CodeDeploy, and many other&#8217;s! So let&#8217;s jump right into it!</p>



<p><strong>Stage 1</strong>: <strong>Configure Security &amp; Create a CodeCommit Repo</strong></p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/catpipeline-arch-stage1-1024x541.png" alt="" class="wp-image-284"/></figure>



<p>First thing we need to do is make an SSH Key for CodeCommit. I&#8217;m running on a Windows machine for this lab, if anybody is running on a Linux or MACOS machine you can go through the guide <a rel="noreferrer noopener" href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-ssh-unixes.html" data-type="URL" data-id="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-ssh-unixes.html" target="_blank">here</a>. The guide for windows is <a rel="noreferrer noopener" href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-ssh-windows.html" target="_blank">here</a> also.</p>



<p>Once we have the SSH connection set up we need to make a CodeCommit repository and Git Clone it to the folder of your choice. So for example I made a folder called repos on my desktop and Git Clone the repo.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/image_2022-06-30_115828472.png" alt="" class="wp-image-289"/><figcaption>My repo is catpipeline-codecommit</figcaption></figure>



<p>Finally we want to download the files provided for use using this link <a rel="noreferrer noopener" href="https://github.com/acantril/learn-cantrill-io-labs/raw/master/aws-codepipeline-catpipeline/01_LABSETUP/container.zip" target="_blank">https://github.com/acantril/learn-cantrill-io-labs/raw/master/aws-codepipeline-catpipeline/01_LABSETUP/container.zip</a>, unzip the file, and copy the files in the repo &lt;<em>catpipeline-codecommit&gt;</em>, afterwards we need to run these commands to push the images to the repo.</p>



<pre class="wp-block-code"><code>git add -A . 
git commit -m ‚Äúcontainer of cats‚Äù 
git push 
</code></pre>



<p><strong>Stage 2</strong>: <strong>Configure CodeBuild to clone the repo, create a container image and store on ECR</strong></p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/catpipeline-arch-stage2-1024x540.png" alt="" class="wp-image-290"/></figure>



<p>Now for this stage we&#8217;re going to create a private Amazon Elastic Container Registry to store our Docker images in. </p>



<p>Next we will use CodeBuild to manage and build our Docker image.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-01_100757399.png" alt="" class="wp-image-293"/><figcaption>Source means which type of repository is the source code to build the Docker.</figcaption></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-01_101131350.png" alt="" class="wp-image-294"/><figcaption>Environment meaning what do you want the Docker image to be ran on. Do you have your own Docker image or need to use a managed AWS image.</figcaption></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-01_101321643.png" alt="" class="wp-image-295"/><figcaption>Additional configuration under environment. We just specify the variables needed. IMAGE_TAG means every single time a Docker image is made it will be labeled as latest.</figcaption></figure>



<p>Before the CodeBuild project is able to use ECR to store the Docker image it will need permissions to access ECR. So under IAM we need to configure it&#8217;s access. We will create an inline policy.</p>



<pre class="wp-block-code"><code>{
  "Statement": &#91;
	{
	  "Action": &#91;
		"ecr:BatchCheckLayerAvailability",
		"ecr:CompleteLayerUpload",
		"ecr:GetAuthorizationToken",
		"ecr:InitiateLayerUpload",
		"ecr:PutImage",
		"ecr:UploadLayerPart"
	  ],
	  "Resource": "*",
	  "Effect": "Allow"
	}
  ],
  "Version": "2012-10-17"
}</code></pre>



<p>We have our Docker image, we have a place to store the image, and we gave our build project permissions to store the image now all we need is the code that will build the image so let&#8217;s go into our CodeCommit repo and create a YAML file.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-01_102631247-1024x399.png" alt="" class="wp-image-296"/><figcaption>You can also make a YAML file on your local machine and push it to the repo.</figcaption></figure>



<pre class="wp-block-code"><code>version: 0.2

phases:
  pre_build:
	commands:
	  - echo Logging in to Amazon ECR...
	  - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
	commands:
	  - echo Build started on `date`
	  - echo Building the Docker image...          
	  - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
	  - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG      
  post_build:
	commands:
	  - echo Build completed on `date`
	  - echo Pushing the Docker image...
	  - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG</code></pre>



<p>Now here comes the moment of truth if we did everything correctly! Let&#8217;s build the project.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-01_103646163-1024x523.png" alt="" class="wp-image-297"/></figure>



<p>and it failed. The log says it found a character that cannot start any token at line 4 but line 4 has pre_build: Let&#8217;s do some digging and see why.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-01_103848075.png" alt="" class="wp-image-298"/></figure>



<p>Looks like YAML doesn&#8217;t allow tabs so let&#8217;s use VSCode to make the YAML file on our local machine and push it to our repo.</p>



<p>First thing I did was pull the file from my repo and in my VSCode clicked spaces and covert my indentation to spaces.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/ir1a3.png" alt="" class="wp-image-299"/></figure>



<p>Then pushed the code to the repository. Let&#8217;s run the build again.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_124358628-1024x271.png" alt="" class="wp-image-320"/></figure>



<p>Looks like the build failed again because of the pull rate limit which is a common problem in the demo. Let&#8217;s like at the GitHub issues tab.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/Screenshot-2022-07-02-091235.png" alt="" class="wp-image-304"/></figure>



<p>So the issues has been solved. I changed the line in my local Docker file and pushed it to the repo and ran the build again.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-02_091440161.png" alt="" class="wp-image-305"/></figure>



<p>And the feeling of success is so bitter sweet!</p>



<p>Now let&#8217;s go ahead and test our Docker image. In the guide Cantrill provides us with a link &lt;https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://learn-cantrill-labs.s3.amazonaws.com/aws-codepipeline-catpipeline/ec2docker.yaml&amp;stackName=DOCKER&gt; which provisions a cloudformation stack. It should look like this.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_121441930.png" alt="" class="wp-image-310"/><figcaption>The YAML file will build a VPC, with multiple subnets, a route table, an internet gateway, and a EC2.</figcaption></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_121959936.png" alt="" class="wp-image-313"/></figure>



<p>After the stack has been created we want to go to the EC2 dashboard and it should have an EC2 running.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_122158811.png" alt="" class="wp-image-314"/></figure>



<p>What we want to do is connect with the EC2 using EC2 Instance Connect.</p>



<p>First thing we want to do is make sure Docker is running on the EC2 instance with the &lt;<em>docker ps&gt;</em> command</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_122910157.png" alt="" class="wp-image-315"/></figure>



<p>Secondly, we want our Docker to get access to our ECR so let&#8217;s run command &lt;<em><code>aws ecr get-login-password --region us-east-1</code></em>&gt; which should output this:</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_123216812-1024x620.png" alt="" class="wp-image-316"/><figcaption>Don&#8217;t worry by the time you see this the lab will be taken down.</figcaption></figure>



<p>Thirdly, we want to use this login information to login into our ECR so lets run this command &lt;aws ecr get-login-password &#8211;region us-east-1 | docker login &#8211;username AWS &#8211;password-stdin ACCOUNTID_REPLACEME.dkr.ecr.us-east-1.amazonaws.com&gt; where ACCOUNTID_REPLACEME is your account ID.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_123556361-1024x144.png" alt="" class="wp-image-317"/></figure>



<p>Fourthly, we need to pull the image from our ECR using &lt;<em>docker pull&gt;</em> and paste the URI of the pipeline.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_123915993-1024x230.png" alt="" class="wp-image-318"/></figure>



<p>Lastly we want to run the docker image we just pulled using &lt;<em>docker run -p 80:80&gt;</em> and paste the docker image number. You can get the docker image using the command &lt;<em>docker images&gt;</em> </p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_124142548-1024x189.png" alt="" class="wp-image-319"/></figure>



<p>After that we need to see if the EC2 shows what&#8217;s needed to be shown so in the browser type &lt;http://PUBLIC_IP_EC2&gt;/ where PUBLIC_IP_EC2 is your EC2 Public IP address.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/Screenshot-2022-07-04-124610-1024x643.png" alt="" class="wp-image-323"/><figcaption>Look at the cute cats <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="üôÇ" class="wp-smiley" style="height: 1em; max-height: 1em;" /></figcaption></figure>



<p><strong>Stage 3: Configure a CodePipeline with commit and build steps to automate build on commit.</strong></p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/catpipeline-arch-stage3-1024x541.png" alt="" class="wp-image-342"/></figure>



<p>Let&#8217;s create a pipeline YAY! <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="üôÇ" class="wp-smiley" style="height: 1em; max-height: 1em;" /> The reason why i&#8217;m so excited is because building pipelines are fun. A pipeline can help developers push code out more faster. CI/CD can test the code to much sure it can run properly in the environment but enough explaining let&#8217;s get into it.</p>



<p>First thing we need to do is create the pipeline.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_131830167.png" alt="" class="wp-image-338"/></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_131942254.png" alt="" class="wp-image-339"/></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_132252930.png" alt="" class="wp-image-340"/></figure>



<p>Now let&#8217;s test to see if the pipeline works. Let&#8217;s update our buildspec.yml file via our local machine and push it to our codecommit.</p>



<pre class="wp-block-code"><code>version: 0.2

phases:
  pre_build:
	commands:
	  - echo Logging in to Amazon ECR...
	  - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
	  - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
	  - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
	  - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
	commands:
	  - echo Build started on `date`
	  - echo Building the Docker image...          
	  - docker build -t $REPOSITORY_URI:latest .
	  - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG    
  post_build:
	commands:
	  - echo Build completed on `date`
	  - echo Pushing the Docker image...
	  - docker push $REPOSITORY_URI:latest
	  - docker push $REPOSITORY_URI:$IMAGE_TAG
	  - echo Writing image definitions file...
	  - printf '&#91;{"name":"%s","imageUri":"%s"}]' "$IMAGE_REPO_NAME" "$REPOSITORY_URI:$IMAGE_TAG" &gt; imagedefinitions.json
artifacts:
  files: imagedefinitions.json</code></pre>



<p>Let&#8217;s use this code to update the build.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/Screenshot-2022-07-04-132241.png" alt="" class="wp-image-341"/><figcaption>Look&#8217;s like the build has succeeded. If the build failed make sure your indentations are spaces not tabs.</figcaption></figure>



<p>So let&#8217;s take a moment of push and run down what we did so far. We made a repository via CodeCommit to to hold our cat files, docker image, and our YAML build file. Then we made an ECR to hold our Docker image and used CodeBuild to create the image. Thirdly, we made a CloudFormation stack to build our EC2 in a VPC so the Docker image can run on. Fourthly, we made a CodePipeline so whenever we make changes to our buildspec.yml file and push it to CodeCommit it will store it to our S3 bucket and CodeBuild will run with the updated file. Now it&#8217;s time for our final stage in this demo.</p>



<p><strong>Stage 4 : Create an ECS Cluster, TG&#8217;s , ALB and configure the code pipeline for deployment to ECS Fargate</strong></p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/catpipeline-arch-stage4-1024x540.png" alt="" class="wp-image-344"/></figure>



<p>For this stage we want to configure an automated deployment of the cat pipeline application to ECS Fargate. So let&#8217;s create a application load balancer that will be the entry point for the containerized application.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_134741108.png" alt="" class="wp-image-345"/><figcaption>Make sure your it&#8217;s your default VPC and all availability zones are checked.</figcaption></figure>



<p>We want to configure a security group that will allow all HTTP traffic in our Load Balancer.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_135026354.png" alt="" class="wp-image-346"/></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_135125672.png" alt="" class="wp-image-347"/></figure>



<p>Let&#8217;s go back to configuring our Load Balancer and create a target group.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_135344478.png" alt="" class="wp-image-348"/><figcaption>This just mean any HTTP traffic that hits our Load Balancer, our Load Balancer will direct it to our Fargate</figcaption></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_135632246.png" alt="" class="wp-image-349"/></figure>



<p>Now that our Load Balancer is being made let&#8217;s configure our Fargate.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_140106816.png" alt="" class="wp-image-350"/><figcaption>Make sure your creating a cluster under ECS and not EKS. Make sure you choose network. </figcaption></figure>



<p>Once the cluster is created we need to define the task so under task definitions click create and click on Fargate.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_140737267.png" alt="" class="wp-image-351"/></figure>



<p>We also want to add a container to the Fargate.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_140857564-1024x448.png" alt="" class="wp-image-352"/><figcaption>The image should be the ECR URI.</figcaption></figure>



<p>After the task definition has been created let&#8217;s view the definition and copy our JSON.</p>



<pre class="wp-block-code"><code>{
  "ipcMode": null,
  "executionRoleArn": "arn:aws:iam:::role/ecsTaskExecutionRole",
  "containerDefinitions": &#91;
    {
      "dnsSearchDomains": null,
      "environmentFiles": null,
      "logConfiguration": {
        "logDriver": "awslogs",
        "secretOptions": null,
        "options": {
          "awslogs-group": "/ecs/catpiplinedemo",
          "awslogs-region": "us-east-1",
          "awslogs-stream-prefix": "ecs"
        }
      },
      "entryPoint": null,
      "portMappings": &#91;
        {
          "hostPort": 80,
          "protocol": "tcp",
          "containerPort": 80
        }
      ],
      "command": null,
      "linuxParameters": null,
      "cpu": 0,
      "environment": &#91;],
      "resourceRequirements": null,
      "ulimits": null,
      "dnsServers": null,
      "mountPoints": &#91;],
      "workingDirectory": null,
      "secrets": null,
      "dockerSecurityOptions": null,
      "memory": null,
      "memoryReservation": null,
      "volumesFrom": &#91;],
      "stopTimeout": null,
      "image": ".dkr.ecr.us-east-1.amazonaws.com/catpipeline",
      "startTimeout": null,
      "firelensConfiguration": null,
      "dependsOn": null,
      "disableNetworking": null,
      "interactive": null,
      "healthCheck": null,
      "essential": true,
      "links": null,
      "hostname": null,
      "extraHosts": null,
      "pseudoTerminal": null,
      "user": null,
      "readonlyRootFilesystem": null,
      "dockerLabels": null,
      "systemControls": null,
      "privileged": null,
      "name": "catpipline"
    }
  ],
  "placementConstraints": &#91;],
  "memory": "1024",
  "taskRoleArn": null,
  "compatibilities": &#91;
    "EC2",
    "FARGATE"
  ],
  "taskDefinitionArn": "arn:aws:ecs:us-east-1::task-definition/catpiplinedemo:1",
  "family": "catpiplinedemo",
  "requiresAttributes": &#91;
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.logging-driver.awslogs"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "ecs.capability.execution-role-awslogs"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.ecr-auth"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.19"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "ecs.capability.execution-role-ecr-pull"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.docker-remote-api.1.18"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "ecs.capability.task-eni"
    }
  ],
  "pidMode": null,
  "requiresCompatibilities": &#91;
    "FARGATE"
  ],
  "networkMode": "awsvpc",
  "runtimePlatform": {
    "operatingSystemFamily": "LINUX",
    "cpuArchitecture": null
  },
  "cpu": "512",
  "revision": 1,
  "status": "ACTIVE",
  "inferenceAccelerators": null,
  "proxyConfiguration": null,
  "volumes": &#91;]
}</code></pre>



<p>Let&#8217;s create a service for the cluster.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_141758963.png" alt="" class="wp-image-354"/></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_141905116.png" alt="" class="wp-image-355"/></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_142055785.png" alt="" class="wp-image-356"/></figure>



<p>Lastly let&#8217;s see if our Load Balancer is showing our cats! Go to EC2 under Load Balancer click on the catpipeline Load Balancer and copy the DNS name and paste it into the browser.</p>



<figure class="wp-block-image size-large is-resized"><img loading="lazy" src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_142433701-1024x660.png" alt="" class="wp-image-357" width="737" height="475"/><figcaption>Looks like it works!</figcaption></figure>



<p>Now we&#8217;re not done yet, let&#8217;s add a deploy stage to our pipeline so when we commit to our repository it will deploy.</p>



<p>Let&#8217;s go back to our codepipline and edit it. Under build we want to add a new stage called deploy.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_142923329.png" alt="" class="wp-image-358"/></figure>



<p>Add an action to the group and let&#8217;s configure.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_143157361.png" alt="" class="wp-image-359"/></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_143239522.png" alt="" class="wp-image-360"/><figcaption>So let&#8217;s break down what&#8217;s going on. Our pipeline is listening to our CodeCommit for any changes, if any changes happen in our repo our Codebuild will create another Docker image based on our changed and store it to our ECR, then it will deploy the image in our ECS (Fargate).</figcaption></figure>



<p>Let&#8217;s test to see if it works, in your local machine in the index.html file let&#8217;s make some changes to and push it.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_143859562.png" alt="" class="wp-image-361"/></figure>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_150735665-1024x551.png" alt="" class="wp-image-362"/><figcaption>Looks like the pipeline works!</figcaption></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/07/image_2022-07-04_150830188.png" alt="" class="wp-image-363"/></figure>



<p><strong>Conclusion</strong></p>



<p>This was an actual fun demo to go through I really liked it. My main goal in my career is to be able to build and maintain infrastructure without needing to see someone do it first so this is a good practice to do. I always learn things by being hands on with it. Hopefully I get a role soon so I can get more experience then just home labs. I ran into two problems in the demo first was the CodeBuild which I went over and second is the CodePipline deploy stage, make sure your spelling is correct. But until next time you guys and Happy 4th of July!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Identity and Access Management (IAM)</title>
		<link>/2022/07/04/identity-and-access-management-iam/</link>
		
		<dc:creator><![CDATA[user]]></dc:creator>
		<pubDate>Mon, 04 Jul 2022 11:26:28 +0000</pubDate>
				<category><![CDATA[AWS]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://artistuniverse.tech/?p=274</guid>

					<description><![CDATA[In today&#8217;s topic I wanted to go over IAM or Identity and Access Management. It&#8217;s very important to understand this service and what it&#8217;s used for. Many people have misconfigured the service in many ways, giving a user to much access to a service or leaking AWS access keys. For example, March 30, 2021 MobiKwik [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>In today&#8217;s topic I wanted to go over IAM or Identity and Access Management. It&#8217;s very important to understand this service and what it&#8217;s used for. Many people have misconfigured the service in many ways, giving a user to much access to a service or leaking AWS access keys. For example, March 30, 2021 <a rel="noreferrer noopener" href="https://techcrunch.com/2021/03/30/mobikwik-investigating-data-breach-after-100m-user-records-found-online/?guccounter=1&amp;guce_referrer=aHR0cHM6Ly9ibG9nLmNocmlzdG9waGV0ZC5mci8&amp;guce_referrer_sig=AQAAAE2ou4dSTjS-oQf2tOmGz87tCDjJpPfRahG1NszL9DyBoY5fg4vMWHoX8VVVdvtejFELTQ8_QFTV3Eu51M7zT2hd7KMb0KyP456sZao8UNuSbW_kkV07nxBeQOzIUDRVDOqGbF6I32uovG0jEOhVV_96NrKdFR122yjOjvflxnIw" data-type="URL" data-id="https://techcrunch.com/2021/03/30/mobikwik-investigating-data-breach-after-100m-user-records-found-online/?guccounter=1&amp;guce_referrer=aHR0cHM6Ly9ibG9nLmNocmlzdG9waGV0ZC5mci8&amp;guce_referrer_sig=AQAAAE2ou4dSTjS-oQf2tOmGz87tCDjJpPfRahG1NszL9DyBoY5fg4vMWHoX8VVVdvtejFELTQ8_QFTV3Eu51M7zT2hd7KMb0KyP456sZao8UNuSbW_kkV07nxBeQOzIUDRVDOqGbF6I32uovG0jEOhVV_96NrKdFR122yjOjvflxnIw" target="_blank">MobiKwik</a> went through a 100M user data breach because of a leaked AWS access key. The cloud can be an overwhelming place to be in but I&#8217;m here to help!</p>



<p><strong>What is AWS IAM? </strong></p>



<p>IAM has been around before AWS was founded. People usually know it as a framework where the authorized party will have the ability to control who has access to the systems. That sums up what AWS IAM is, it&#8217;s a access control where you can specify who has the ability to use what service under what condition. Today I wanted to go over setting up and assuming IAM roles in an environment.</p>



<p><strong>Create and Assume Roles in AWS</strong></p>



<p>First step we want to do is create the correct policy for the user that&#8217;s provided in the lab. The policy will give the user full S3 access expect for two buckets that was made before hand.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/Screenshot-2022-06-29-125146-1024x668.png" alt="" class="wp-image-275"/></figure>



<pre class="wp-block-code"><code>{
    "Version": "2012-10-17",
    "Statement": &#91;
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": &#91;
                "s3:ListStorageLensConfigurations",
                "s3:ListAccessPointsForObjectLambda",
                "s3:GetAccessPoint",
                "s3:PutAccountPublicAccessBlock",
                "s3:GetAccountPublicAccessBlock",
                "s3:ListAllMyBuckets",
                "s3:ListAccessPoints",
                "s3:PutAccessPointPublicAccessBlock",
                "s3:ListJobs",
                "s3:PutStorageLensConfiguration",
                "s3:ListMultiRegionAccessPoints",
                "s3:CreateJob"
            ],
            "Resource": "*"
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": "s3:*",
            "Resource": "arn:aws:s3::851592760101:accesspoint/*"
        },
        {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": "s3:*",
            "Resource": &#91;
                "arn:aws:s3:*:851592760101:storage-lens/*",
                "arn:aws:s3:*:851592760101:accesspoint/*",
                "arn:aws:s3:::cfst-3352-0420dac77a81904f3474ca99-appconfigprod1-8x31vcbk3f3w",
                "arn:aws:s3:::cfst-3352-0420dac77a81904f3474ca99-appconfigprod2-19s6selwyo5x3",
                "arn:aws:s3:*:851592760101:job/*",
                "arn:aws:s3:::*/*",
                "arn:aws:s3:us-west-2:851592760101:async-request/mrap/*/*",
                "arn:aws:s3-object-lambda:*:851592760101:accesspoint/*"
            ]
        }
    ]
}</code></pre>



<p>Secondly, we want to attach the policy to a role we created.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/Screenshot-2022-06-29-125815-1024x526.png" alt="" class="wp-image-276"/></figure>



<p>Thirdly we want to add the permissions of the policy to the user.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/image_2022-06-29_131253333.png" alt="" class="wp-image-277"/></figure>



<p>Now we can see we have access to the appconfig buckets but not the customer data buckets because we don&#8217;t need to give our devs access to anything customer related.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/image_2022-06-29_131521736.png" alt="" class="wp-image-278"/></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/Screenshot-2022-06-29-131317.png" alt="" class="wp-image-279"/></figure>



<p></p>



<p>You can also use CloudFormation to create groups, policies, and roles with MFA enforced.</p>



<pre class="wp-block-code"><code>Parameters:
  AllowRegion:
    Type: String
    Description: 'A single region that resources can be created in, where service supports this permissions including EC2'
    Default: 'ap-southeast-2'  
  BaselineNamePrefix:
    Type: String
    Description: 'The prefix for roles, groups and policies created by this stack'
    Default: 'Baseline'
  BaselineExportName:
    Type: String
    Description: 'The CloudFormation export name prefix used with the resource name for the resources created, eg Baseline-PrivilegedAdminRole'
    Default: 'Baseline'
    MinLength: '3'
    MaxLength: '32'
  # BaselineS3TemplateBucket:
  #   Type: String
  #   Description: Case sensitive bucket name that contains cloudformation templates
  #   Default: ''
  IdentityManagementAccount:
    Type: String
    Description: AccountId that is trusted to assume all roles, or blank for no cross-account trust. Note that the trusted account also needs to be appropriately secured.
    Default: ''
  ToolingManagementAccount:
    Type: String
    Description: AccountId that is trusted to assume the ReadOnly and StackSet roles, or blank for no cross-account trust. Note that the trusted account also needs to be appropriately secured.
    Default: ''
  OrganizationsRootAccount:
    Type: String
    Description: AccountId that is trusted to assume Organizations role, or blank for no cross-account trust. Note that the trusted account also needs to be appropriately secured.
    Default: ''
Conditions:
  LinkToIdentityManagementAccount: !Not
    - !Equals
      - !Ref IdentityManagementAccount
      - ''
  LinkToToolingManagementAccount: !Not
    - !Equals
      - !Ref ToolingManagementAccount
      - ''
  LinkToOrganizationsRootAccount: !Not
    - !Equals
      - !Ref OrganizationsRootAccount
      - ''
Resources:
  ManageSelfIAMUserGroupPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${BaselineNamePrefix}-ManageSelfIAMUserGroupPolicy'
      Description: !Sub 'Policy for ${BaselineNamePrefix} managing own IAM user'
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'iam:GetAccountPasswordPolicy'
            Resource: '*'
          - Sid: AllowUsersToListMFADevicesandUsersForConsole
            Effect: Allow
            Action:
              - 'iam:ListMFADevices'
              - 'iam:ListVirtualMFADevices'
              - 'iam:ListUsers'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'iam:ChangePassword'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/${!aws:username}'
          - Sid: AllowUsersToDeactivateTheirOwnVirtualMFADevice
            Effect: Allow
            Action:
              - 'iam:DeactivateMFADevice'
              - 'iam:*LoginProfile'
              - 'iam:*AccessKey*'
              - 'iam:*SSHPublicKey*'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/${!aws:username}'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': true
          - Sid: AllowUsersToCreateEnableResyncDeleteTheirOwnVirtualMFADevice
            Effect: Allow
            Action:
              - 'iam:CreateVirtualMFADevice'
              - 'iam:EnableMFADevice'
              - 'iam:ResyncMFADevice'
              - 'iam:DeleteVirtualMFADevice'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/${!aws:username}'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}'
  ManageSelfIAMUserGroup:
    Type: 'AWS::IAM::Group'
    DependsOn:
      - ManageSelfIAMUserGroupPolicy
    Properties:
      GroupName: !Sub '${BaselineNamePrefix}-ManageSelf'
      ManagedPolicyArns:
        - !Ref ManageSelfIAMUserGroupPolicy
      Path: /
  AccountWideReadOnlyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${BaselineNamePrefix}-AccountWideReadOnly'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'sts:AssumeRole'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
          - !If
            - LinkToIdentityManagementAccount
            - Effect: Allow
              Principal:
                AWS:
                  !Sub 'arn:aws:iam::${IdentityManagementAccount}:root'
              Action: 'sts:AssumeRole'
              Condition:
                Bool:
                  'aws:MultiFactorAuthPresent': 'true'
            - !Ref 'AWS::NoValue'
          - !If
            - LinkToToolingManagementAccount
            - Effect: Allow
              Principal:
                AWS:
                  !Sub 'arn:aws:iam::${ToolingManagementAccount}:root'
              Action: 'sts:AssumeRole'
            - !Ref 'AWS::NoValue'
  AccountWideReadOnlyGroup:
    Type: 'AWS::IAM::Group'
    DependsOn:
      - ManageSelfIAMUserGroupPolicy
    Properties:
      GroupName: !Sub '${BaselineNamePrefix}-AccountWideReadOnly'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
      Path: /
  PrivilegedAdminGroupPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn:
      - PrivilegedAdminRole
    Properties:
      ManagedPolicyName: !Sub '${BaselineNamePrefix}-PrivilegedAdminGroupPolicy'
      Description: !Sub 'Policy for ${BaselineNamePrefix} PrivilegedAdmin Group'
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
              - 'sts:GetSessionToken'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${PrivilegedAdminRole}'
  PrivilegedAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${BaselineNamePrefix}-PrivilegedAdmin'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'sts:AssumeRole'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
          - !If
            - LinkToIdentityManagementAccount
            - Effect: Allow
              Principal:
                AWS:
                  !Sub 'arn:aws:iam::${IdentityManagementAccount}:root'
              Action: 'sts:AssumeRole'
              Condition:
                Bool:
                  'aws:MultiFactorAuthPresent': 'true'
            - !Ref 'AWS::NoValue'
  PrivilegedAdminGroup:
    Type: 'AWS::IAM::Group'
    DependsOn:
      - PrivilegedAdminGroupPolicy
      - ManageSelfIAMUserGroupPolicy
    Properties:
      GroupName: !Sub '${BaselineNamePrefix}-PrivilegedAdmin'
      ManagedPolicyArns:
        - !Ref PrivilegedAdminGroupPolicy
      Path: /
  RestrictedAdminGroupPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${BaselineNamePrefix}-RestrictedAdminGroupPolicy'
      Description: !Sub 'Policy for ${BaselineNamePrefix} RestrictedAdmin Group'
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
              - 'sts:GetSessionToken'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${RestrictedAdminRole}'
  RestrictedAdminGroup:
    Type: 'AWS::IAM::Group'
    Properties:
      GroupName: !Sub '${BaselineNamePrefix}-RestrictedAdmin'
      ManagedPolicyArns:
        - !Ref RestrictedAdminGroupPolicy
        - !Ref ManageSelfIAMUserGroupPolicy
      Path: /
  RestrictedAdminRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - RestrictedServicesDenyRolePolicy
    Properties:
      RoleName: !Sub '${BaselineNamePrefix}-RestrictedAdmin'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
        - !Ref CloudFormationAdminRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'sts:AssumeRole'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
          - !If
            - LinkToIdentityManagementAccount
            - Effect: Allow
              Principal:
                AWS:
                  - !Sub 'arn:aws:iam::${IdentityManagementAccount}:root'
              Action: 'sts:AssumeRole'
              Condition:
                Bool:
                  'aws:MultiFactorAuthPresent': 'true'
            - !Ref 'AWS::NoValue'
  RestrictedServicesDenyRolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${BaselineNamePrefix}-RestrictedServicesDenyRolePolicy'
      Description: !Sub 'Policy for ${BaselineNamePrefix} Explicitly Denying Services and Resources'
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Action:
              - 'aws-portal:ModifyAccount'
              - 'aws-portal:ModifyBilling'
              - 'aws-portal:ModifyPaymentMethods'
              - 'budgets:ModifyBudget'
            Resource:
              - '*'
          - Effect: Deny
            Action:
              - 'cloudhsm:*'
            Resource:
              - '*'
  IdentityAdminRolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${BaselineNamePrefix}-IdentityAdminRolePolicy'
      Description: !Sub 'Policy for ${BaselineNamePrefix} IdentityAdmin Role'
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'iam:*'
            Resource: '*'
  IdentityAdminGroupPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn:
      - IdentityAdminRole
    Properties:
      ManagedPolicyName: !Sub '${BaselineNamePrefix}-IdentityAdminGroupPolicy'
      Description: !Sub 'Policy for ${BaselineNamePrefix} IdentityAdmin Group'
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
              - 'sts:GetSessionToken'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${IdentityAdminRole}'
  IdentityAdminRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - IdentityAdminRolePolicy
      - CloudFormationAdminRolePolicy
    Properties:
      RoleName: !Sub '${BaselineNamePrefix}-IdentityAdmin'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
        - !Ref IdentityAdminRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'sts:AssumeRole'
            Condition:
              Bool:
                'aws:MultiFactorAuthPresent': 'true'
          - !If
            - LinkToIdentityManagementAccount
            - Effect: Allow
              Principal:
                AWS:
                  !Sub 'arn:aws:iam::${IdentityManagementAccount}:root'
              Action: 'sts:AssumeRole'
              Condition:
                Bool:
                  'aws:MultiFactorAuthPresent': 'true'
            - !Ref 'AWS::NoValue'
  IdentityAdminGroup:
    Type: 'AWS::IAM::Group'
    DependsOn:
      - IdentityAdminGroupPolicy
    Properties:
      GroupName: !Sub '${BaselineNamePrefix}-IdentityAdmin'
      ManagedPolicyArns:
        - !Ref IdentityAdminGroupPolicy
      Path: /
  CloudFormationAdminRolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${BaselineNamePrefix}-CloudFormationAdminRolePolicy'
      Description: !Sub 'Policy for ${BaselineNamePrefix} CloudFormation Role'
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'cloudformation:EstimateTemplateCost'
              - 'cloudformation:PreviewStackUpdate'
              - 'cloudformation:ValidateTemplate'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'cloudformation:CancelUpdateStack'
              - 'cloudformation:ContinueUpdateRollback'
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:ExecuteChangeSet'
              - 'cloudformation:SetStackPolicy'
              - 'cloudformation:SignalResource'
              - 'cloudformation:UpdateStack'
            Resource:
              - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*'
              - !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/*'
          - Effect: Allow
            Action:
              - 'iam:PassRole'
              - 'sts:AssumeRole'
              - 'sts:GetSessionToken'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${BaselineNamePrefix}-CloudFormation'
  CloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${BaselineNamePrefix}-CloudFormation'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
              - Effect: Deny
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:UpdateStack'
                Resource: '*'
                Condition:
                  StringNotEquals:
                    'cloudformation:TemplateURL':
                      #- !Sub 'https://s3.amazonaws.com/${BaselineS3TemplateBucket}'
                      - !Sub 'https://s3.amazonaws.com/*'
              - Effect: Deny
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:UpdateStack'
                Resource: '*'
                Condition:
                  'Null':
                    'cloudformation:TemplateURL': 'true'
  StackSetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'sts:AssumeRole'
          - !If
            - LinkToToolingManagementAccount
            - Effect: Allow
              Principal:
                AWS:
                  !Sub 'arn:aws:iam::${ToolingManagementAccount}:root'
              Action: 'sts:AssumeRole'
            - !Ref 'AWS::NoValue'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  OrganizationsRole:
    Condition: LinkToOrganizationsRootAccount
    Type: AWS::IAM::Role
    Properties:
      RoleName: OrganizationAccountAccessRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${OrganizationsRootAccount}:root'
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
Outputs:
  ManageSelfRolePolicy:
    Description: Manage Self Role Policy
    Value: !Ref ManageSelfIAMUserGroupPolicy
    Export:
      Name: !Sub '${BaselineExportName}-ManageSelfRolePolicy'
  AccountWideReadOnlyRole:
    Description: Account Wide Read Only Role
    Value: !GetAtt AccountWideReadOnlyRole.Arn
    Export:
      Name: !Sub '${BaselineExportName}-AccountWideReadOnlyRole'
  AccountWideReadOnlyGroup:
    Description: Account Wide Read Only Group
    Value: !GetAtt AccountWideReadOnlyGroup.Arn
    Export:
      Name: !Sub '${BaselineExportName}-AccountWideReadOnlyGroup'
  IdentityAdminRole:
    Description: Identity Admin Role
    Value: !GetAtt IdentityAdminRole.Arn
    Export:
      Name: !Sub '${BaselineExportName}-IdentityAdminRole'
  PrivilegedAdminRole:
    Description: Privileged Admin Role
    Value: !GetAtt PrivilegedAdminRole.Arn
    Export:
      Name: !Sub '${BaselineExportName}-PrivilegedAdminRole'
  RestrictedAdminGroup:
    Description: Restricted Admin Group
    Value: !Ref RestrictedAdminGroup
    Export:
      Name: !Sub '${BaselineExportName}-RestrictedAdminGroup'
  RestrictedAdminRole:
    Description: Restricted Admin Role
    Value: !GetAtt RestrictedAdminRole.Arn
    Export:
      Name: !Sub '${BaselineExportName}-RestrictedAdminRole'
  CloudFormationRole:
    Description: Baseline CloudFormation Role
    Value: !GetAtt CloudFormationRole.Arn
    Export:
      Name: !Sub '${BaselineExportName}-CloudFormationRole'
  StackSetRole:
    Description: Baseline StackSet Role
    Value: !GetAtt StackSetRole.Arn
    Export:
      Name: !Sub '${BaselineExportName}-StackSetRole'
  OrganizationsRole:
    Condition: LinkToOrganizationsRootAccount
    Description: Baseline Organizations Role
    Value: !GetAtt OrganizationsRole.Arn
    Export:
      Name: !Sub '${BaselineExportName}-OrganizationsRole'</code></pre>



<p></p>



<p>Hope this was very helpful to you and informative. If there&#8217;s any question please feel free to message me on LinkedIn with any question but until next time, Artist out!</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>AWS Secrets Manager</title>
		<link>/2022/07/04/aws-secrets-manager/</link>
		
		<dc:creator><![CDATA[user]]></dc:creator>
		<pubDate>Mon, 04 Jul 2022 11:24:34 +0000</pubDate>
				<category><![CDATA[AWS]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://artistuniverse.tech/?p=265</guid>

					<description><![CDATA[One problem developers run into is hard coding credentials. Let&#8217;s say you have a web server running on multiple EC2 instances and it&#8217;s talking to other microservices, how do we store the credentials for them to talk? that&#8217;s where AWS Secrets Manager comes in! What is AWS Secrets Manager? AWS Secrets Manager helps you store [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>One problem developers run into is hard coding credentials. Let&#8217;s say you have a web server running on multiple EC2 instances and it&#8217;s talking to other microservices, how do we store the credentials for them to talk? that&#8217;s where AWS Secrets Manager comes in!</p>



<p><strong>What is AWS Secrets Manager?</strong></p>



<p>AWS Secrets Manager helps you store secrets needed to access applications, services, and IT resources. AWS uses a plaintext data key to encrypt the secret in memory. When a secret is retrieved, Secrets Manager decrypts the data key (using the AWS KMS default keys) and uses the plaintext data key to decrypt the secret. </p>



<p>Today I wanted to go over a lab on ACloudGuru on how we can implement AWS Secrets Management to authenticate to a RDS.</p>



<p><strong>Using Secrets Manager to Authenticate with an RDS Database Using Lambda</strong>.</p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/JEkqCZu-1024x569.png" alt="" class="wp-image-266"/></figure>



<p>First thing we&#8217;re going to do is create a Lambda function. Where gonna deploy it in the VPC that was made for us and use the two public subnets and security group previsioned. </p>



<figure class="wp-block-image size-large"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/image_2022-06-27_103042763-1024x599.png" alt="" class="wp-image-267"/></figure>



<p>We want to create a layer using the mysql zip file provided and attach it to the Lambda function. Afterwards we have to make changes to the index.js file with the code provided.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/image_2022-06-27_104834165.png" alt="" class="wp-image-269"/></figure>



<p>Afterwards we have to create a secret to hold our credentials. </p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/Screenshot-2022-06-27-104240.png" alt="" class="wp-image-270"/></figure>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/Screenshot-2022-06-27-104429.png" alt="" class="wp-image-271"/><figcaption>For this lab we turned on the rotation feature to a day.</figcaption></figure>



<p>Lastly test the Lambda code to run. In order to to the Lambda function to work you have to enable the Secrets Manager VPC endpoint, modify the security group, and add a policy to the IAM role to allow it to connect to Secrets Manager. For some reason i&#8217;m getting an error whenever creating the endpoint so I was not able to get that part done.</p>



<figure class="wp-block-image size-full"><img src="https://artistuniverse.tech/wp-content/uploads/2022/06/image_2022-06-27_105932312.png" alt="" class="wp-image-272"/><figcaption>  <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f641.png" alt="üôÅ" class="wp-smiley" style="height: 1em; max-height: 1em;" /></figcaption></figure>



<p>The is just the scratch of the surface of many security Key competencies, next time we&#8217;ll go over another cloud security practice that goes unnoticed but until then thank you for coming to my Ted Talk!</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
